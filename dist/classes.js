"use strict";
require('traceur-source-maps').install(require('traceur'));
var expect = require('chai').expect;
var Character = function Character(x, y) {
  console.log('Character ctor');
  this.x = x;
  this.y = y;
};
($traceurRuntime.createClass)(Character, {attack: function(character) {
    console.log((this.name + " attacking " + character.name));
  }}, {});
var Monster = function Monster(x, y, name) {
  console.log('Monster ctor');
  $traceurRuntime.superCall(this, $Monster.prototype, "constructor", [x, y]);
  this.name = name;
  this.health_ = 100;
  console.log('result: ', this);
};
var $Monster = Monster;
($traceurRuntime.createClass)(Monster, {
  attack: function(character) {
    $traceurRuntime.superCall(this, $Monster.prototype, "attack", [character]);
  },
  get isAlive() {
    console.log('isAlive getter');
    return this.health_ > 0;
  },
  get health() {
    console.log('health getter');
    return this.health_;
  },
  set health(value) {
    console.log('health setter');
    if (value < 0)
      throw new Error('Health must be non-negative.');
    this.health_ = value;
  }
}, {}, Character);
var myMonster = Monster(5, 1, 'arrrg');
expect(myMonster.health).to.be.eql(100);
expect(myMonster.isAlive).to.be.eql(true);
expect(myMonster.x).to.be.eql(5);
myMonster.health = 10;
expect(myMonster.health).to.be.eql(10);
expect(myMonster.name).to.be.eql('arrrg');
var myMonsterTwo = new Monster(6, 2, 'samuel');
myMonster.attack(myMonsterTwo);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsYXNzZXMuZXM2LmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci80IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzYiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQU0sQUFBQyxDQUFDLHFCQUFvQixDQUFDLFFBQVEsQUFBQyxDQUFDLE9BQU0sQUFBQyxDQUFDLFNBQVEsQ0FBQyxDQUFDLENBQUM7QUFBQyxBQUFJLEVBQUEsQ0FBQSxNQUFLLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxNQUFLLENBQUMsT0FBTyxDQUFDO0FDQTlGLEFBQUksRUFBQSxZREVKLFNBQU0sVUFBUSxDQUNBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBRztBQUNoQixRQUFNLElBQUksQUFBQyxDQUFDLGdCQUFlLENBQUMsQ0FBQTtBQUM1QixLQUFHLEVBQUUsRUFBSSxFQUFBLENBQUM7QUFDVixLQUFHLEVBQUUsRUFBSSxFQUFBLENBQUM7QUNOMEIsQURPdEMsQ0NQc0M7QUNBeEMsQUFBQyxlQUFjLFlBQVksQ0FBQyxBQUFDLGFGUzNCLE1BQUssQ0FBTCxVQUFPLFNBQVEsQ0FBRztBQUNoQixVQUFNLElBQUksQUFBQyxFQUFJLElBQUcsS0FBSyxFQUFDLGNBQWEsRUFBQyxDQUFBLFNBQVEsS0FBSyxFQUFHLENBQUE7RUFDeEQsTUVYbUY7QURBckYsQUFBSSxFQUFBLFVEY0osU0FBTSxRQUFNLENBQ0UsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFHLENBQUEsSUFBRyxDQUFHO0FBQ3RCLFFBQU0sSUFBSSxBQUFDLENBQUMsY0FBYSxDQUFDLENBQUE7QUdoQjlCLEFIaUJJLGdCR2pCVSxVQUFVLEFBQUMsMkNIaUJmLENBQUEsQ0FBRyxFQUFBLEVHaEJ1QyxDSGdCckM7QUFDWCxLQUFHLEtBQUssRUFBSSxLQUFHLENBQUM7QUFDaEIsS0FBRyxRQUFRLEVBQUksSUFBRSxDQUFDO0FBRWxCLFFBQU0sSUFBSSxBQUFDLENBQUMsVUFBUyxDQUFHLEtBQUcsQ0FBQyxDQUFBO0FDckJRLEFEc0J0QyxDQ3RCc0M7QUdBeEMsQUFBSSxFQUFBLG1CQUFvQyxDQUFBO0FDQXhDLEFBQUMsZUFBYyxZQUFZLENBQUMsQUFBQztBTHdCM0IsT0FBSyxDQUFMLFVBQU8sU0FBUSxDQUFHO0FHeEJwQixBSHlCSSxrQkd6QlUsVUFBVSxBQUFDLHNDSHlCZixTQUFRLEVHeEJrQyxDSHdCaEM7RUFHbEI7QUFFQSxJQUFJLFFBQU0sRUFBSTtBQUNaLFVBQU0sSUFBSSxBQUFDLENBQUMsZ0JBQWUsQ0FBQyxDQUFBO0FBQzVCLFNBQU8sQ0FBQSxJQUFHLFFBQVEsRUFBSSxFQUFBLENBQUM7RUFDekI7QUFDQSxJQUFJLE9BQUssRUFBSTtBQUNYLFVBQU0sSUFBSSxBQUFDLENBQUMsZUFBYyxDQUFDLENBQUE7QUFDM0IsU0FBTyxDQUFBLElBQUcsUUFBUSxDQUFDO0VBQ3JCO0FBQ0EsSUFBSSxPQUFLLENBQUUsS0FBSSxDQUFHO0FBQ2hCLFVBQU0sSUFBSSxBQUFDLENBQUMsZUFBYyxDQUFDLENBQUE7QUFDM0IsT0FBSSxLQUFJLEVBQUksRUFBQTtBQUFHLFVBQU0sSUFBSSxNQUFJLEFBQUMsQ0FBQyw4QkFBNkIsQ0FBQyxDQUFDO0FBQUEsQUFDOUQsT0FBRyxRQUFRLEVBQUksTUFBSSxDQUFDO0VBQ3RCO0FBQUEsS0E1Qm9CLFVBQVEsQ0tiMEI7QUw0Q3hELEFBQUksRUFBQSxDQUFBLFNBQVEsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLENBQUEsQ0FBRSxFQUFBLENBQUcsUUFBTSxDQUFDLENBQUM7QUFFckMsS0FBSyxBQUFDLENBQUMsU0FBUSxPQUFPLENBQUMsR0FBRyxHQUFHLElBQUksQUFBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDO0FBQ3ZDLEtBQUssQUFBQyxDQUFDLFNBQVEsUUFBUSxDQUFDLEdBQUcsR0FBRyxJQUFJLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUN6QyxLQUFLLEFBQUMsQ0FBQyxTQUFRLEVBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxBQUFDLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFDaEMsUUFBUSxPQUFPLEVBQUksR0FBQyxDQUFDO0FBQ3JCLEtBQUssQUFBQyxDQUFDLFNBQVEsT0FBTyxDQUFDLEdBQUcsR0FBRyxJQUFJLEFBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztBQUN0QyxLQUFLLEFBQUMsQ0FBQyxTQUFRLEtBQUssQ0FBQyxHQUFHLEdBQUcsSUFBSSxBQUFDLENBQUMsT0FBTSxDQUFDLENBQUM7QUFFekMsQUFBSSxFQUFBLENBQUEsWUFBVyxFQUFJLElBQUksUUFBTSxBQUFDLENBQUMsQ0FBQSxDQUFFLEVBQUEsQ0FBRyxTQUFPLENBQUMsQ0FBQztBQUM3QyxRQUFRLE9BQU8sQUFBQyxDQUFDLFlBQVcsQ0FBQyxDQUFBO0FBQUEiLCJmaWxlIjoiY2xhc3Nlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJ3RyYWNldXItc291cmNlLW1hcHMnKS5pbnN0YWxsKHJlcXVpcmUoJ3RyYWNldXInKSk7dmFyIGV4cGVjdCA9IHJlcXVpcmUoJ2NoYWknKS5leHBlY3Q7XG5cbmNsYXNzIENoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKHgsIHkpIHtcbiAgICBjb25zb2xlLmxvZygnQ2hhcmFjdGVyIGN0b3InKVxuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIGF0dGFjayhjaGFyYWN0ZXIpIHtcbiAgICBjb25zb2xlLmxvZyhgJHt0aGlzLm5hbWV9IGF0dGFja2luZyAke2NoYXJhY3Rlci5uYW1lfWApXG4gIH1cbn1cblxuY2xhc3MgTW9uc3RlciBleHRlbmRzIENoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKHgsIHksIG5hbWUpIHtcbiAgICBjb25zb2xlLmxvZygnTW9uc3RlciBjdG9yJylcbiAgICBzdXBlcih4LCB5KTtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuaGVhbHRoXyA9IDEwMDtcblxuICAgIGNvbnNvbGUubG9nKCdyZXN1bHQ6ICcsIHRoaXMpXG4gIH1cblxuICBhdHRhY2soY2hhcmFjdGVyKSB7XG4gICAgc3VwZXIoY2hhcmFjdGVyKTtcbiAgICAvLyBDYW4gYWxzbyBiZSB3cml0dGVuIGFzOlxuICAgIC8vIHN1cGVyLmF0dGFjaygpO1xuICB9XG5cbiAgZ2V0IGlzQWxpdmUoKSB7XG4gICAgY29uc29sZS5sb2coJ2lzQWxpdmUgZ2V0dGVyJylcbiAgICByZXR1cm4gdGhpcy5oZWFsdGhfID4gMDtcbiAgfVxuICBnZXQgaGVhbHRoKCkge1xuICAgIGNvbnNvbGUubG9nKCdoZWFsdGggZ2V0dGVyJylcbiAgICByZXR1cm4gdGhpcy5oZWFsdGhfO1xuICB9XG4gIHNldCBoZWFsdGgodmFsdWUpIHtcbiAgICBjb25zb2xlLmxvZygnaGVhbHRoIHNldHRlcicpXG4gICAgaWYgKHZhbHVlIDwgMCkgdGhyb3cgbmV3IEVycm9yKCdIZWFsdGggbXVzdCBiZSBub24tbmVnYXRpdmUuJyk7XG4gICAgdGhpcy5oZWFsdGhfID0gdmFsdWU7XG4gIH1cbn1cblxudmFyIG15TW9uc3RlciA9IE1vbnN0ZXIoNSwxLCAnYXJycmcnKTtcblxuZXhwZWN0KG15TW9uc3Rlci5oZWFsdGgpLnRvLmJlLmVxbCgxMDApO1xuZXhwZWN0KG15TW9uc3Rlci5pc0FsaXZlKS50by5iZS5lcWwodHJ1ZSk7XG5leHBlY3QobXlNb25zdGVyLngpLnRvLmJlLmVxbCg1KTtcbm15TW9uc3Rlci5oZWFsdGggPSAxMDtcbmV4cGVjdChteU1vbnN0ZXIuaGVhbHRoKS50by5iZS5lcWwoMTApO1xuZXhwZWN0KG15TW9uc3Rlci5uYW1lKS50by5iZS5lcWwoJ2FycnJnJyk7XG5cbnZhciBteU1vbnN0ZXJUd28gPSBuZXcgTW9uc3Rlcig2LDIsICdzYW11ZWwnKTtcbm15TW9uc3Rlci5hdHRhY2sobXlNb25zdGVyVHdvKSIsInZhciAkX19wbGFjZWhvbGRlcl9fMCA9ICRfX3BsYWNlaG9sZGVyX18xIiwiKCR0cmFjZXVyUnVudGltZS5jcmVhdGVDbGFzcykoJF9fcGxhY2Vob2xkZXJfXzAsICRfX3BsYWNlaG9sZGVyX18xLCAkX19wbGFjZWhvbGRlcl9fMikiLCIkdHJhY2V1clJ1bnRpbWUuc3VwZXJDYWxsKCRfX3BsYWNlaG9sZGVyX18wLCAkX19wbGFjZWhvbGRlcl9fMSwgJF9fcGxhY2Vob2xkZXJfXzIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfX3BsYWNlaG9sZGVyX18zKSIsInZhciAkX19wbGFjZWhvbGRlcl9fMCA9ICRfX3BsYWNlaG9sZGVyX18xIiwiKCR0cmFjZXVyUnVudGltZS5jcmVhdGVDbGFzcykoJF9fcGxhY2Vob2xkZXJfXzAsICRfX3BsYWNlaG9sZGVyX18xLCAkX19wbGFjZWhvbGRlcl9fMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfX3BsYWNlaG9sZGVyX18zKSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==