{
  "name": "expect",
  "version": "0.1.1",
  "description": "Write better assertions",
  "main": "expect.js",
  "dependencies": {},
  "devDependencies": {
    "mocha": "~1.17.1"
  },
  "scripts": {
    "test": "mocha spec"
  },
  "keywords": [
    "expect",
    "assert",
    "test",
    "spec"
  ],
  "author": {
    "name": "Michael Jackson"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/mjijackson/expect.git"
  },
  "bugs": {
    "url": "https://github.com/mjijackson/expect/issues"
  },
  "homepage": "https://github.com/mjijackson/expect",
  "readme": "[expect](https://github.com/mjijackson/expect) is a thin wrapper around node's [assert](http://nodejs.org/api/assert.html) module that lets you write better assertions.\n\nWhen you use expect, you write assertions similarly to how you would say them, e.g. \"I expect this value to be equal to 3\" or \"I expect this array to contain 3\". When you write assertions in this way, you don't need to remember the order of actual and expected arguments to functions like `assert.equal`, which helps you write better tests.\n\n### API\n\n#### expect(object).toBe(value, [message])\n\nAsserts that `object` is strictly equal to `value` using [assert.strictEqual](http://nodejs.org/api/assert.html#assert_assert_strictequal_actual_expected_message).\n\n#### expect(object).toNotBe(value, [message])\n\nAsserts that `object` is not strictly equal to `value` using [assert.notStrictEqual](http://nodejs.org/api/assert.html#assert_assert_notstrictequal_actual_expected_message).\n\n#### expect(object).toEqual(value, [message])\n\nAsserts that the given `object` equals `value` using [assert.equal](http://nodejs.org/api/assert.html#assert_assert_equal_actual_expected_message).\n\n#### expect(object).toNotEqual(value, [message])\n\nAsserts that the given `object` is not equal to `value` using [assert.notEqual](http://nodejs.org/api/assert.html#assert_assert_notequal_actual_expected_message).\n\n#### expect(block).toThrow([error], [message])\n\nAsserts that the given `block` throws an error using [assert.throws](http://nodejs.org/api/assert.html#assert_assert_throws_block_error_message). The `error` argument may be a constructor, `RegExp`, or validation function.\n\n```js\nexpect(function () {\n  throw new Error('boom!');\n}).toThrow(/boom/);\n```\n\n#### expect(block).toNotThrow([message])\n\nAsserts that the given `block` does not throw using [assert.doesNotThrow](http://nodejs.org/api/assert.html#assert_assert_doesnotthrow_block_message).\n\n#### expect(object).toBeA(constructor, [message])\n\nAsserts the given `object` is an `instanceof constructor`.\n\n```js\nexpect(new User).toBeA(User);\n```\n\n#### expect(string).toMatch(pattern, [message])\n\nAsserts the given `string` matches `pattern`, which must be a `RegExp`.\n\n```js\nexpect('a string').toMatch(/string/);\n```\n\n#### expect(number).toBeLessThan(value, [message])\n\nAsserts the given `number` is less than `value`.\n\n```js\nexpect(2).toBeLessThan(3);\n```\n\n#### expect(number).toBeGreaterThan(value, [message])\n\nAsserts the given `number` is greater than `value`.\n\n```js\nexpect(3).toBeGreaterThan(2);\n```\n\n#### expect(array).toInclude(value, [comparator], [message])\n\nAsserts the given `array` contains `value`. The `comparator` function, if given, should compare two objects and either `return false` or `throw` if they are not equal. It defaults to `assert.deepEqual`.\n\n```js\nexpect([ 1, 2, 3 ]).toInclude(3);\n```\n\n#### expect(array).toExclude(value, [comparator], [message])\n\nAsserts the given `array` does not contain `value`. The `comparator` function, if given, should compare two objects and either `return false` or `throw` if they are not equal. It defaults to `assert.deepEqual`.\n\n```js\nexpect([ 1, 2, 3 ]).toExclude(4);\n```\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "expect@0.1.1",
  "_shasum": "139906b46235cf19c820496737427d8cfe61f6dd",
  "_from": "expect@0.1.1",
  "_resolved": "https://registry.npmjs.org/expect/-/expect-0.1.1.tgz"
}
