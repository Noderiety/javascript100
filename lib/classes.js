"use strict";
require('traceur-source-maps').install(require('traceur'));
var Character = function Character(x, y) {
  console.log('Character ctor');
  this.x = x;
  this.y = y;
};
($traceurRuntime.createClass)(Character, {attack: function(character) {
    console.log((this.name + " attacking " + character.name));
  }}, {});
var Monster = function Monster(x, y, name) {
  console.log('Monster ctor');
  $traceurRuntime.superCall(this, $Monster.prototype, "constructor", [x, y]);
  this.name = name;
  this.health_ = 100;
  console.log('result: ', this);
};
var $Monster = Monster;
($traceurRuntime.createClass)(Monster, {
  attack: function(character) {
    $traceurRuntime.superCall(this, $Monster.prototype, "attack", [character]);
  },
  get isAlive() {
    console.log('isAlive getter');
    return this.health_ > 0;
  },
  get health() {
    console.log('health getter');
    return this.health_;
  },
  set health(value) {
    console.log('health setter');
    if (value < 0)
      throw new Error('Health must be non-negative.');
    this.health_ = value;
  }
}, {}, Character);
module.exports = {
  Monster: Monster,
  Character: Character
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsYXNzZXMuZXM2LmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci80IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzYiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQU0sQUFBQyxDQUFDLHFCQUFvQixDQUFDLFFBQVEsQUFBQyxDQUFDLE9BQU0sQUFBQyxDQUFDLFNBQVEsQ0FBQyxDQUFDLENBQUM7QUNBMUQsQUFBSSxFQUFBLFlERUosU0FBTSxVQUFRLENBQ0EsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFHO0FBQ2hCLFFBQU0sSUFBSSxBQUFDLENBQUMsZ0JBQWUsQ0FBQyxDQUFBO0FBQzVCLEtBQUcsRUFBRSxFQUFJLEVBQUEsQ0FBQztBQUNWLEtBQUcsRUFBRSxFQUFJLEVBQUEsQ0FBQztBQ04wQixBRE90QyxDQ1BzQztBQ0F4QyxBQUFDLGVBQWMsWUFBWSxDQUFDLEFBQUMsYUZTM0IsTUFBSyxDQUFMLFVBQU8sU0FBUSxDQUFHO0FBQ2hCLFVBQU0sSUFBSSxBQUFDLEVBQUksSUFBRyxLQUFLLEVBQUMsY0FBYSxFQUFDLENBQUEsU0FBUSxLQUFLLEVBQUcsQ0FBQTtFQUN4RCxNRVhtRjtBREFyRixBQUFJLEVBQUEsVURjSixTQUFNLFFBQU0sQ0FDRSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQUcsQ0FBQSxJQUFHLENBQUc7QUFDdEIsUUFBTSxJQUFJLEFBQUMsQ0FBQyxjQUFhLENBQUMsQ0FBQTtBR2hCOUIsQUhpQkksZ0JHakJVLFVBQVUsQUFBQywyQ0hpQmYsQ0FBQSxDQUFHLEVBQUEsRUdoQnVDLENIZ0JyQztBQUNYLEtBQUcsS0FBSyxFQUFJLEtBQUcsQ0FBQztBQUNoQixLQUFHLFFBQVEsRUFBSSxJQUFFLENBQUM7QUFFbEIsUUFBTSxJQUFJLEFBQUMsQ0FBQyxVQUFTLENBQUcsS0FBRyxDQUFDLENBQUE7QUNyQlEsQURzQnRDLENDdEJzQztBR0F4QyxBQUFJLEVBQUEsbUJBQW9DLENBQUE7QUNBeEMsQUFBQyxlQUFjLFlBQVksQ0FBQyxBQUFDO0FMd0IzQixPQUFLLENBQUwsVUFBTyxTQUFRLENBQUc7QUd4QnBCLEFIeUJJLGtCR3pCVSxVQUFVLEFBQUMsc0NIeUJmLFNBQVEsRUd4QmtDLENId0JoQztFQUdsQjtBQUVBLElBQUksUUFBTSxFQUFJO0FBQ1osVUFBTSxJQUFJLEFBQUMsQ0FBQyxnQkFBZSxDQUFDLENBQUE7QUFDNUIsU0FBTyxDQUFBLElBQUcsUUFBUSxFQUFJLEVBQUEsQ0FBQztFQUN6QjtBQUNBLElBQUksT0FBSyxFQUFJO0FBQ1gsVUFBTSxJQUFJLEFBQUMsQ0FBQyxlQUFjLENBQUMsQ0FBQTtBQUMzQixTQUFPLENBQUEsSUFBRyxRQUFRLENBQUM7RUFDckI7QUFDQSxJQUFJLE9BQUssQ0FBRSxLQUFJLENBQUc7QUFDaEIsVUFBTSxJQUFJLEFBQUMsQ0FBQyxlQUFjLENBQUMsQ0FBQTtBQUMzQixPQUFJLEtBQUksRUFBSSxFQUFBO0FBQUcsVUFBTSxJQUFJLE1BQUksQUFBQyxDQUFDLDhCQUE2QixDQUFDLENBQUM7QUFBQSxBQUM5RCxPQUFHLFFBQVEsRUFBSSxNQUFJLENBQUM7RUFDdEI7QUFBQSxLQTVCb0IsVUFBUSxDS2IwQjtBTDJDeEQsS0FBSyxRQUFRLEVBQUk7QUFBQyxRQUFNLENBQU4sUUFBTTtBQUFHLFVBQVEsQ0FBUixVQUFRO0FBQUEsQUFBQyxDQUFBO0FBV0oiLCJmaWxlIjoiY2xhc3Nlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJ3RyYWNldXItc291cmNlLW1hcHMnKS5pbnN0YWxsKHJlcXVpcmUoJ3RyYWNldXInKSk7Ly8gdmFyIGV4cGVjdCA9IHJlcXVpcmUoJ2NoYWknKS5leHBlY3Q7XG5cbmNsYXNzIENoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKHgsIHkpIHtcbiAgICBjb25zb2xlLmxvZygnQ2hhcmFjdGVyIGN0b3InKVxuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIGF0dGFjayhjaGFyYWN0ZXIpIHtcbiAgICBjb25zb2xlLmxvZyhgJHt0aGlzLm5hbWV9IGF0dGFja2luZyAke2NoYXJhY3Rlci5uYW1lfWApXG4gIH1cbn1cblxuY2xhc3MgTW9uc3RlciBleHRlbmRzIENoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKHgsIHksIG5hbWUpIHtcbiAgICBjb25zb2xlLmxvZygnTW9uc3RlciBjdG9yJylcbiAgICBzdXBlcih4LCB5KTtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuaGVhbHRoXyA9IDEwMDtcblxuICAgIGNvbnNvbGUubG9nKCdyZXN1bHQ6ICcsIHRoaXMpXG4gIH1cblxuICBhdHRhY2soY2hhcmFjdGVyKSB7XG4gICAgc3VwZXIoY2hhcmFjdGVyKTtcbiAgICAvLyBDYW4gYWxzbyBiZSB3cml0dGVuIGFzOlxuICAgIC8vIHN1cGVyLmF0dGFjaygpO1xuICB9XG5cbiAgZ2V0IGlzQWxpdmUoKSB7XG4gICAgY29uc29sZS5sb2coJ2lzQWxpdmUgZ2V0dGVyJylcbiAgICByZXR1cm4gdGhpcy5oZWFsdGhfID4gMDtcbiAgfVxuICBnZXQgaGVhbHRoKCkge1xuICAgIGNvbnNvbGUubG9nKCdoZWFsdGggZ2V0dGVyJylcbiAgICByZXR1cm4gdGhpcy5oZWFsdGhfO1xuICB9XG4gIHNldCBoZWFsdGgodmFsdWUpIHtcbiAgICBjb25zb2xlLmxvZygnaGVhbHRoIHNldHRlcicpXG4gICAgaWYgKHZhbHVlIDwgMCkgdGhyb3cgbmV3IEVycm9yKCdIZWFsdGggbXVzdCBiZSBub24tbmVnYXRpdmUuJyk7XG4gICAgdGhpcy5oZWFsdGhfID0gdmFsdWU7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge01vbnN0ZXIsIENoYXJhY3Rlcn1cbi8vIHZhciBteU1vbnN0ZXIgPSBNb25zdGVyKDUsMSwgJ2FycnJnJyk7XG5cbi8vIGV4cGVjdChteU1vbnN0ZXIuaGVhbHRoKS50by5iZS5lcWwoMTAwKTtcbi8vIGV4cGVjdChteU1vbnN0ZXIuaXNBbGl2ZSkudG8uYmUuZXFsKHRydWUpO1xuLy8gZXhwZWN0KG15TW9uc3Rlci54KS50by5iZS5lcWwoNSk7XG4vLyBteU1vbnN0ZXIuaGVhbHRoID0gMTA7XG4vLyBleHBlY3QobXlNb25zdGVyLmhlYWx0aCkudG8uYmUuZXFsKDEwKTtcbi8vIGV4cGVjdChteU1vbnN0ZXIubmFtZSkudG8uYmUuZXFsKCdhcnJyZycpO1xuXG4vLyB2YXIgbXlNb25zdGVyVHdvID0gbmV3IE1vbnN0ZXIoNiwyLCAnc2FtdWVsJyk7XG4vLyBteU1vbnN0ZXIuYXR0YWNrKG15TW9uc3RlclR3bykiLCJ2YXIgJF9fcGxhY2Vob2xkZXJfXzAgPSAkX19wbGFjZWhvbGRlcl9fMSIsIigkdHJhY2V1clJ1bnRpbWUuY3JlYXRlQ2xhc3MpKCRfX3BsYWNlaG9sZGVyX18wLCAkX19wbGFjZWhvbGRlcl9fMSwgJF9fcGxhY2Vob2xkZXJfXzIpIiwiJHRyYWNldXJSdW50aW1lLnN1cGVyQ2FsbCgkX19wbGFjZWhvbGRlcl9fMCwgJF9fcGxhY2Vob2xkZXJfXzEsICRfX3BsYWNlaG9sZGVyX18yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMykiLCJ2YXIgJF9fcGxhY2Vob2xkZXJfXzAgPSAkX19wbGFjZWhvbGRlcl9fMSIsIigkdHJhY2V1clJ1bnRpbWUuY3JlYXRlQ2xhc3MpKCRfX3BsYWNlaG9sZGVyX18wLCAkX19wbGFjZWhvbGRlcl9fMSwgJF9fcGxhY2Vob2xkZXJfXzIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMykiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=